{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the SPOEF documentation \u00b6 SPOEF is a Python package that lets you easily generate features with signal processing methods from transaction data. Example Usage - Generating Features \u00b6 transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 ) License \u00b6 SPOEF is created under the MIT License, see more in the LICENSE file","title":"Home"},{"location":"index.html#welcome-to-the-spoef-documentation","text":"SPOEF is a Python package that lets you easily generate features with signal processing methods from transaction data.","title":"Welcome to the SPOEF documentation"},{"location":"index.html#example-usage-generating-features","text":"transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 )","title":"Example Usage - Generating Features"},{"location":"index.html#license","text":"SPOEF is created under the MIT License, see more in the LICENSE file","title":"License"},{"location":"getting_started/install.html","text":"Installation \u00b6 In order to install SPOEF you need to use Python 3.7 or higher. Install SPOEF via pip with: pip install SPOEF Alternatively you can fork/clone and run: git clone https://github.com/JanBargeman/SPOEF.git cd spoef/ pip install .","title":"Installation"},{"location":"getting_started/install.html#installation","text":"In order to install SPOEF you need to use Python 3.7 or higher. Install SPOEF via pip with: pip install SPOEF Alternatively you can fork/clone and run: git clone https://github.com/JanBargeman/SPOEF.git cd spoef/ pip install .","title":"Installation"},{"location":"getting_started/minimal_working_example.html","text":"import pandas as pd from spoef.feature_generation import feature_generation # Generating the data data = pd . DataFrame ([ [ 'John' , 1 , '2021-01-03' , 1000 , 1000 ], [ 'John' , 1 , '2021-02-03' , 1000 , 2000 ], [ 'John' , 1 , '2021-03-03' , - 3000 , - 1000 ], [ 'Jane' , 0 , '2021-01-03' , 1000 , 1000 ], [ 'Jane' , 0 , '2021-02-03' , 5000 , 6000 ], [ 'Jane' , 0 , '2021-03-03' , 2000 , 8000 ], ], columns = [ 'name' , 'label' , 'date' , 'transaction' , 'balance' ] ) # Make the date into datetime object. data . date = pd . to_datetime ( data . date , format = \"%Y-%m- %d \" ) # Setting up which features to generate. list_featuretypes = [ \"Basic\" , \"FourierComplete\" , \"FourierNLargest\" , \"WaveletComplete\" , \"WaveletBasic\" ] # Generating features over 1 quarter. # For the transactions: transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 ) # For the balances: balance_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"balance\" ]], grouper = \"name\" , combine_fill_method = \"balance\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 )","title":"Minimal working example"},{"location":"tutorials/features_summary.html","text":"Generating a set of features \u00b6 import pandas as pd from spoef.feature_generation import feature_generation from spoef.utils import count_occurences_features # Generating the data data = pd . DataFrame ([ [ 'John' , 1 , '2021-01-03' , 1000 , 1000 ], [ 'John' , 1 , '2021-02-03' , 1000 , 2000 ], [ 'John' , 1 , '2021-03-03' , - 3000 , - 1000 ], [ 'Jane' , 0 , '2021-01-03' , 1000 , 1000 ], [ 'Jane' , 0 , '2021-02-03' , 5000 , 6000 ], [ 'Jane' , 0 , '2021-03-03' , 2000 , 8000 ], ], columns = [ 'name' , 'label' , 'date' , 'transaction' , 'balance' ] ) # Make the date into datetime object. data . date = pd . to_datetime ( data . date , format = \"%Y-%m- %d \" ) # Setting up which features to generate. list_featuretypes = [ \"Basic\" , \"FourierComplete\" , \"FourierNLargest\" , \"WaveletComplete\" , \"WaveletBasic\" ] # Generating features over 1 quarter. # For the transactions: transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 ) Then, the summary \u00b6 overview = count_occurences_features ( transaction_features_quarterly , print_head = 5 ) This returns a dataframe with counts for each type of datatype, time window, feature type and several other details. This gives us an insight into what features were generated.","title":"Features summary"},{"location":"tutorials/features_summary.html#generating-a-set-of-features","text":"import pandas as pd from spoef.feature_generation import feature_generation from spoef.utils import count_occurences_features # Generating the data data = pd . DataFrame ([ [ 'John' , 1 , '2021-01-03' , 1000 , 1000 ], [ 'John' , 1 , '2021-02-03' , 1000 , 2000 ], [ 'John' , 1 , '2021-03-03' , - 3000 , - 1000 ], [ 'Jane' , 0 , '2021-01-03' , 1000 , 1000 ], [ 'Jane' , 0 , '2021-02-03' , 5000 , 6000 ], [ 'Jane' , 0 , '2021-03-03' , 2000 , 8000 ], ], columns = [ 'name' , 'label' , 'date' , 'transaction' , 'balance' ] ) # Make the date into datetime object. data . date = pd . to_datetime ( data . date , format = \"%Y-%m- %d \" ) # Setting up which features to generate. list_featuretypes = [ \"Basic\" , \"FourierComplete\" , \"FourierNLargest\" , \"WaveletComplete\" , \"WaveletBasic\" ] # Generating features over 1 quarter. # For the transactions: transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 )","title":"Generating a set of features"},{"location":"tutorials/features_summary.html#then-the-summary","text":"overview = count_occurences_features ( transaction_features_quarterly , print_head = 5 ) This returns a dataframe with counts for each type of datatype, time window, feature type and several other details. This gives us an insight into what features were generated.","title":"Then, the summary"},{"location":"tutorials/minimal_working_example.html","text":"import pandas as pd from spoef.feature_generation import feature_generation # Generating the data data = pd . DataFrame ([ [ 'John' , 1 , '2021-01-03' , 1000 , 1000 ], [ 'John' , 1 , '2021-02-03' , 1000 , 2000 ], [ 'John' , 1 , '2021-03-03' , - 3000 , - 1000 ], [ 'Jane' , 0 , '2021-01-03' , 1000 , 1000 ], [ 'Jane' , 0 , '2021-02-03' , 5000 , 6000 ], [ 'Jane' , 0 , '2021-03-03' , 2000 , 8000 ], ], columns = [ 'name' , 'label' , 'date' , 'transaction' , 'balance' ] ) # Make the date into datetime object. data . date = pd . to_datetime ( data . date , format = \"%Y-%m- %d \" ) # Setting up which features to generate. list_featuretypes = [ \"Basic\" , \"FourierComplete\" , \"FourierNLargest\" , \"WaveletComplete\" , \"WaveletBasic\" ] # Generating features over 1 quarter. # For the transactions: transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 ) # For the balances: balance_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"balance\" ]], grouper = \"name\" , combine_fill_method = \"balance\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 )","title":"Minimal working example"},{"location":"tutorials/regular_features.html","text":"import pandas as pd from spoef.feature_generation import feature_generation # Generating the data data = pd . DataFrame ([ [ 'John' , 1 , '2021-01-03' , 1000 , 1000 ], [ 'John' , 1 , '2021-02-03' , 1000 , 2000 ], [ 'John' , 1 , '2021-03-03' , - 3000 , - 1000 ], [ 'Jane' , 0 , '2021-01-03' , 1000 , 1000 ], [ 'Jane' , 0 , '2021-02-03' , 5000 , 6000 ], [ 'Jane' , 0 , '2021-03-03' , 2000 , 8000 ], ], columns = [ 'name' , 'label' , 'date' , 'transaction' , 'balance' ] ) # Make the date into datetime object. data . date = pd . to_datetime ( data . date , format = \"%Y-%m- %d \" ) # Setting up which features to generate. list_featuretypes = [ \"Basic\" , \"FourierComplete\" , \"FourierNLargest\" , \"WaveletComplete\" , \"WaveletBasic\" ] # Generating features over 1 quarter. # For the transactions: transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 ) # Generating features over 1 year. # For the transactions: transaction_features_yearly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'year' , list_featuretypes = list_featuretypes , observation_length = 1 )","title":"Regular features"},{"location":"tutorials/transformed_features.html","text":"import pandas as pd from spoef.feature_generation import feature_generation from spoef.transforms import feature_generation_transformed # Generating the data data = pd . DataFrame ([ [ 'John' , 1 , '2021-01-03' , 1000 , 1000 ], [ 'John' , 1 , '2021-02-03' , 1000 , 2000 ], [ 'John' , 1 , '2021-03-03' , - 3000 , - 1000 ], [ 'Jane' , 0 , '2021-01-03' , 1000 , 1000 ], [ 'Jane' , 0 , '2021-02-03' , 5000 , 6000 ], [ 'Jane' , 0 , '2021-03-03' , 2000 , 8000 ], ], columns = [ 'name' , 'label' , 'date' , 'transaction' , 'balance' ] ) # Make the date into datetime object. data . date = pd . to_datetime ( data . date , format = \"%Y-%m- %d \" ) # Setting up which features to generate. list_featuretypes = [ \"Basic\" , \"FourierComplete\" , \"FourierNLargest\" , \"WaveletComplete\" , \"WaveletBasic\" ] # Generating normalized features over 1 quarter. # For the transactions: normalized_transaction_features_quarterly = feature_generation ( data = data [[ \"name\" , \"date\" , \"transaction\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , list_featuretypes = list_featuretypes , observation_length = 1 , normalize = True ) # Generating PCA features over 1 quarter. # For the transformed transactions and balances: PCA_features_quarterly = feature_generation_transformed ( data = data [[ \"name\" , \"date\" , \"transaction\" , \"balance\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , transformer_type = 'PCA' , list_featuretypes = list_featuretypes , observation_length = 1 ) # Generating ICA features over 1 quarter. # For the transformed transactions and balances: ICA_features_quarterly = feature_generation_transformed ( data = data [[ \"name\" , \"date\" , \"transaction\" , \"balance\" ]], grouper = \"name\" , combine_fill_method = \"transaction\" , time_window = 'quarter' , transformer_type = 'ICA' , list_featuretypes = list_featuretypes , observation_length = 1 )","title":"Transformed features"}]}